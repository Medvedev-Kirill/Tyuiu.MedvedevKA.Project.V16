@page "/inventory"
@rendermode InteractiveServer
@inject NavigationManager navigate
@inject IInventoryDataService inventory

<PageTitle>Инвениаризация</PageTitle>

<h1>Инвентарь</h1>

<div class="alert alert-info">
    <p><strong>Общее количество товаров:</strong> @TotalProductsCount</p>
    <p><strong>Общая стоимость инвентаря:</strong> @TotalInventoryValue.ToString("C")</p>
    <p><strong>Количество товаров по категориям:</strong></p>
    <ul>
        @foreach (var category in CategoryCounts)
        {
            <li>@category.Key: @category.Value</li>
        }
    </ul>
    @if (LowStockProducts != null && LowStockProducts.Any())
    {
        <p><strong>Товары с низким запасом:</strong></p>
        <ul>
             @foreach (var product in LowStockProducts)
                {
                    <li>@product.NameProduct - Количество: @product.Quantity </li>
                }
        </ul>
    }
    else
    {
         <p><strong>Товары с низким запасом:</strong> Нет</p>
    }
</div>


<table class="table table-bordered">
    <thead>
        <tr>
            <th>ID Товара</th>
            <th>Название</th>
            <th>Описание</th>
            <th>Цена</th>
            <th>Количество</th>
            <th>Единица измерения</th>
            <th>Категория</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (products == null)
        {
            <tr>
                <td colspan="8">Loading...</td>
            </tr>
        }
        else
        {
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductId</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="text" @bind="editingProduct.NameProduct" />
                        }
                        else
                        {
                            @product.NameProduct
                        }</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="text" @bind="editingProduct.Description" />
                        }
                        else
                        {
                            @product.Description
                        }</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="number" @bind="editingProduct.Price" />
                        }
                        else
                        {
                            @product.Price
                        }</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="number" @bind="editingProduct.Quantity" />
                        }
                        else
                        {
                            @product.Quantity
                        }</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="text" @bind="editingProduct.Unit" />
                        }
                        else
                        {
                            @product.Unit
                        }</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="text" @bind="editingProduct.Category" />
                        }
                        else
                        {
                            @product.Category
                        }</td>
                    <td>
                        @if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <button class="btn btn-success btn-sm" @onclick="SaveChanges">Сохранить</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Отменить</button>
                        }
                        else
                        {
                            <button class="btn btn-warning btn-sm" @onclick="@(() => BeginEdit(product.ProductId))">Редактировать</button>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteProduct(product.ProductId))">Удалить</button>
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div style="margin-top: 10px; margin-right: 10px;">
    <button class="btn btn-primary" @onclick="AddProduct">Добавить Товар</button>
</div>

@code {
    IEnumerable<Product>? products;
    private Product? editingProduct;
    private int? editingProductId;
    private bool isEditing = false;

    public int TotalProductsCount => products?.Count() ?? 0;
    public decimal TotalInventoryValue => products?.Sum(p => p.Price * p.Quantity) ?? 0;
    public Dictionary<string, int> CategoryCounts => products?.GroupBy(p => p.Category).ToDictionary(g => g.Key, g => g.Count()) ?? new Dictionary<string, int>();
     public IEnumerable<Product>? LowStockProducts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadProducts();
    }
     private async Task LoadProducts()
    {
        products = await inventory.GetProductsAsync();
        LowStockProducts = products?.Where(p => p.Quantity < 10).ToList();
    }
    private async Task BeginEdit(int productId)
    {
        editingProductId = productId;
        editingProduct = products.FirstOrDefault(p => p.ProductId == productId);
        isEditing = true;
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        if (editingProduct != null)
        {
            await inventory.UpdateProductAsync(editingProduct);
             await LoadProducts();
            isEditing = false;
            editingProduct = null;
            StateHasChanged();
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        editingProduct = null;
        StateHasChanged();
    }


    void AddProduct()
    {
        navigate.NavigateTo("/inventory/add");
    }

    async Task DeleteProduct(int productId)
    {
        try
        {
            await inventory.DeleteProductAsync(productId);
            await LoadProducts();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting product: {ex.Message}");
        }
    }
}
