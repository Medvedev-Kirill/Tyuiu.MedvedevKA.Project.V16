@page "/inventory"
@rendermode InteractiveServer
@inject NavigationManager navigate
@inject IInventoryDataService inventory

<PageTitle>Инвениаризация</PageTitle>

<h1>Инвентарь</h1>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>ID Товара</th>
            <th>Название</th>
            <th>Описание</th>
            <th>Цена</th>
            <th>Количество</th>
            <th>Единица измерения</th>
            <th>Категория</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (products == null)
        {
            <tr>
                <td colspan="8">Loading...</td>
            </tr>
        }
        else
        {
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductId</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="text" @bind="editingProduct.NameProduct" />
                        }
                        else
                        {
                            @product.NameProduct
                        }</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="text" @bind="editingProduct.Description" />
                        }
                        else
                        {
                            @product.Description
                        }</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="number" @bind="editingProduct.Price" />
                        }
                        else
                        {
                            @product.Price
                        }</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="number" @bind="editingProduct.Quantity" />
                        }
                        else
                        {
                            @product.Quantity
                        }</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="text" @bind="editingProduct.Unit" />
                        }
                        else
                        {
                            @product.Unit
                        }</td>
                    <td>@if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <input type="text" @bind="editingProduct.Category" />
                        }
                        else
                        {
                            @product.Category
                        }</td>
                    <td>
                        @if (editingProduct != null && editingProduct.ProductId == product.ProductId)
                        {
                            <button class="btn btn-success btn-sm" @onclick="SaveChanges">Сохранить</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Отменить</button>
                        }
                        else
                        {
                            <button class="btn btn-warning btn-sm" @onclick="@(() => BeginEdit(product.ProductId))">Редактировать</button>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteProduct(product.ProductId))">Удалить</button>
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div style="margin-top: 10px; margin-right: 10px;">
    <button class="btn btn-primary" @onclick="AddProduct">Добавить Товар</button>
</div>

@code {
    IEnumerable<Product>? products;
    private Product? editingProduct;
    private int? editingProductId;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        products = await inventory.GetProductsAsync();
    }
    private async Task BeginEdit(int productId)
    {
        editingProductId = productId;
        editingProduct = products.FirstOrDefault(p => p.ProductId == productId);
        isEditing = true;
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        if (editingProduct != null)
        {
            await inventory.UpdateProductAsync(editingProduct);
            products = await inventory.GetProductsAsync();
            isEditing = false;
            editingProduct = null;
            StateHasChanged();
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        editingProduct = null;
        StateHasChanged();
    }


    void AddProduct()
    {
        navigate.NavigateTo("/inventory/add");
    }
    
    async Task DeleteProduct(int productId)
    {
        try
        {
            await inventory.DeleteProductAsync(productId);
            products = await inventory.GetProductsAsync(); // Refresh the product list
            StateHasChanged(); // Inform Blazor to re-render the UI
        }
        catch (Exception ex)
        {
            // Handle exceptions appropriately (e.g., display an error message)
            Console.Error.WriteLine($"Error deleting product: {ex.Message}");
        }
    }
}